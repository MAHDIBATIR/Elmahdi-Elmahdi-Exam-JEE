{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RemboursementListComponent = class RemboursementListComponent {\n  constructor(remboursementService, creditService, route, router) {\n    this.remboursementService = remboursementService;\n    this.creditService = creditService;\n    this.route = route;\n    this.router = router;\n    this.remboursements = [];\n    this.loading = true;\n    this.error = null;\n    this.paymentProcessing = false;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('creditId');\n      if (id) {\n        this.creditId = +id;\n        this.loadRemboursements();\n        this.loadCreditDetails();\n      } else {\n        this.router.navigate(['/credits']);\n      }\n    });\n  }\n  loadRemboursements() {\n    this.loading = true;\n    this.remboursementService.getRemboursementsByCredit(this.creditId).subscribe({\n      next: data => {\n        this.remboursements = data;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Erreur lors du chargement des remboursements.';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  loadCreditDetails() {\n    this.creditService.getCredit(this.creditId).subscribe({\n      next: data => {\n        this.credit = data;\n      },\n      error: err => {\n        console.error('Erreur lors du chargement des détails du crédit', err);\n      }\n    });\n  }\n  getCreditType() {\n    if (!this.credit) return '';\n    if ('montantAchat' in this.credit) {\n      return 'Immobilier';\n    } else if ('motif' in this.credit) {\n      return 'Personnel';\n    } else if ('nomProjet' in this.credit) {\n      return 'Professionnel';\n    }\n    return 'Inconnu';\n  }\n  markAsPaid(remboursement) {\n    if (remboursement.regle) return;\n    if (confirm('Êtes-vous sûr de vouloir marquer cette échéance comme payée?')) {\n      this.paymentProcessing = true;\n      const today = new Date();\n      this.remboursementService.markAsPaid(remboursement.id, today).subscribe({\n        next: updatedRemboursement => {\n          const index = this.remboursements.findIndex(r => r.id === updatedRemboursement.id);\n          if (index !== -1) {\n            this.remboursements[index] = updatedRemboursement;\n          }\n          this.paymentProcessing = false;\n        },\n        error: err => {\n          this.error = 'Erreur lors de l\\'enregistrement du paiement.';\n          this.paymentProcessing = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n  isOverdue(remboursement) {\n    if (remboursement.regle) return false;\n    const today = new Date();\n    const echeance = new Date(remboursement.dateEcheance);\n    return echeance < today;\n  }\n  getPaidRemboursementsCount() {\n    return this.remboursements.filter(r => r.regle).length;\n  }\n  getTotalAmount() {\n    return this.remboursements.reduce((sum, r) => sum + r.montant, 0);\n  }\n  getPaidAmount() {\n    return this.remboursements.filter(r => r.regle).reduce((sum, r) => sum + r.montant, 0);\n  }\n};\nRemboursementListComponent = __decorate([Component({\n  selector: 'app-remboursement-list',\n  templateUrl: './remboursement-list.component.html',\n  styleUrls: ['./remboursement-list.component.css']\n})], RemboursementListComponent);","map":{"version":3,"names":["Component","RemboursementListComponent","constructor","remboursementService","creditService","route","router","remboursements","loading","error","paymentProcessing","ngOnInit","paramMap","subscribe","params","id","get","creditId","loadRemboursements","loadCreditDetails","navigate","getRemboursementsByCredit","next","data","err","console","getCredit","credit","getCreditType","markAsPaid","remboursement","regle","confirm","today","Date","updatedRemboursement","index","findIndex","r","isOverdue","echeance","dateEcheance","getPaidRemboursementsCount","filter","length","getTotalAmount","reduce","sum","montant","getPaidAmount","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\ENSET\\S4\\JEE\\Elbatir_Elmahdi\\frontend\\src\\app\\components\\remboursement\\remboursement-list\\remboursement-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { RemboursementService } from '../../../services/remboursement.service';\r\nimport { CreditService } from '../../../services/credit.service';\r\nimport { Remboursement } from '../../../models/remboursement.model';\r\nimport { Credit } from '../../../models/credit.model';\r\n\r\n@Component({\r\n  selector: 'app-remboursement-list',\r\n  templateUrl: './remboursement-list.component.html',\r\n  styleUrls: ['./remboursement-list.component.css']\r\n})\r\nexport class RemboursementListComponent implements OnInit {\r\n  remboursements: Remboursement[] = [];\r\n  creditId!: number;\r\n  credit?: Credit;\r\n  loading = true;\r\n  error: string | null = null;\r\n  paymentProcessing = false;\r\n\r\n  constructor(\r\n    private remboursementService: RemboursementService,\r\n    private creditService: CreditService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(params => {\r\n      const id = params.get('creditId');\r\n      if (id) {\r\n        this.creditId = +id;\r\n        this.loadRemboursements();\r\n        this.loadCreditDetails();\r\n      } else {\r\n        this.router.navigate(['/credits']);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRemboursements(): void {\r\n    this.loading = true;\r\n    this.remboursementService.getRemboursementsByCredit(this.creditId).subscribe({\r\n      next: (data) => {\r\n        this.remboursements = data;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = 'Erreur lors du chargement des remboursements.';\r\n        this.loading = false;\r\n        console.error(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCreditDetails(): void {\r\n    this.creditService.getCredit(this.creditId).subscribe({\r\n      next: (data) => {\r\n        this.credit = data;\r\n      },\r\n      error: (err) => {\r\n        console.error('Erreur lors du chargement des détails du crédit', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getCreditType(): string {\r\n    if (!this.credit) return '';\r\n    if ('montantAchat' in this.credit) {\r\n      return 'Immobilier';\r\n    } else if ('motif' in this.credit) {\r\n      return 'Personnel';\r\n    } else if ('nomProjet' in this.credit) {\r\n      return 'Professionnel';\r\n    }\r\n    return 'Inconnu';\r\n  }\r\n\r\n  markAsPaid(remboursement: Remboursement): void {\r\n    if (remboursement.regle) return;\r\n\r\n    if (confirm('Êtes-vous sûr de vouloir marquer cette échéance comme payée?')) {\r\n      this.paymentProcessing = true;\r\n      const today = new Date();\r\n      \r\n      this.remboursementService.markAsPaid(remboursement.id!, today).subscribe({\r\n        next: (updatedRemboursement) => {\r\n          const index = this.remboursements.findIndex(r => r.id === updatedRemboursement.id);\r\n          if (index !== -1) {\r\n            this.remboursements[index] = updatedRemboursement;\r\n          }\r\n          this.paymentProcessing = false;\r\n        },\r\n        error: (err) => {\r\n          this.error = 'Erreur lors de l\\'enregistrement du paiement.';\r\n          this.paymentProcessing = false;\r\n          console.error(err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isOverdue(remboursement: Remboursement): boolean {\r\n    if (remboursement.regle) return false;\r\n    const today = new Date();\r\n    const echeance = new Date(remboursement.dateEcheance);\r\n    return echeance < today;\r\n  }\r\n\r\n  getPaidRemboursementsCount(): number {\r\n    return this.remboursements.filter(r => r.regle).length;\r\n  }\r\n\r\n  getTotalAmount(): number {\r\n    return this.remboursements.reduce((sum, r) => sum + r.montant, 0);\r\n  }\r\n\r\n  getPaidAmount(): number {\r\n    return this.remboursements\r\n      .filter(r => r.regle)\r\n      .reduce((sum, r) => sum + r.montant, 0);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}