{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CreditService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/api';\n  }\n  // Generic credit methods\n  getAllCredits() {\n    return this.http.get(`${this.baseUrl}/credits`);\n  }\n  getCreditsByClient(clientId) {\n    return this.http.get(`${this.baseUrl}/clients/${clientId}/credits`);\n  }\n  getCredit(id) {\n    return this.http.get(`${this.baseUrl}/credits/${id}`);\n  }\n  // Credit Immobilier methods\n  createCreditImmobilier(credit) {\n    return this.http.post(`${this.baseUrl}/credits/immobilier`, credit);\n  }\n  // Credit Personnel methods\n  createCreditPersonnel(credit) {\n    return this.http.post(`${this.baseUrl}/credits/personnel`, credit);\n  }\n  // Credit Professionnel methods\n  createCreditProfessionnel(credit) {\n    return this.http.post(`${this.baseUrl}/credits/professionnel`, credit);\n  }\n  // Common methods for all credit types\n  updateCredit(id, credit) {\n    return this.http.put(`${this.baseUrl}/credits/${id}`, credit);\n  }\n  deleteCredit(id) {\n    return this.http.delete(`${this.baseUrl}/credits/${id}`);\n  }\n  simulateCredit(montant, duree, tauxInteret) {\n    return this.http.get(`${this.baseUrl}/credits/simulation`, {\n      params: {\n        montant: montant.toString(),\n        duree: duree.toString(),\n        tauxInteret: tauxInteret.toString()\n      }\n    });\n  }\n  static {\n    this.ɵfac = function CreditService_Factory(t) {\n      return new (t || CreditService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreditService,\n      factory: CreditService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["CreditService","constructor","http","baseUrl","getAllCredits","get","getCreditsByClient","clientId","getCredit","id","createCreditImmobilier","credit","post","createCreditPersonnel","createCreditProfessionnel","updateCredit","put","deleteCredit","delete","simulateCredit","montant","duree","tauxInteret","params","toString","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\ENSET\\S4\\JEE\\Elbatir_Elmahdi\\frontend\\src\\app\\services\\credit.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Credit, CreditPersonnel, CreditImmobilier, CreditProfessionnel } from '../models/credit.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreditService {\r\n  private baseUrl = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Generic credit methods\r\n  getAllCredits(): Observable<Credit[]> {\r\n    return this.http.get<Credit[]>(`${this.baseUrl}/credits`);\r\n  }\r\n\r\n  getCreditsByClient(clientId: number): Observable<Credit[]> {\r\n    return this.http.get<Credit[]>(`${this.baseUrl}/clients/${clientId}/credits`);\r\n  }\r\n\r\n  getCredit(id: number): Observable<Credit> {\r\n    return this.http.get<Credit>(`${this.baseUrl}/credits/${id}`);\r\n  }\r\n\r\n  // Credit Immobilier methods\r\n  createCreditImmobilier(credit: CreditImmobilier): Observable<CreditImmobilier> {\r\n    return this.http.post<CreditImmobilier>(`${this.baseUrl}/credits/immobilier`, credit);\r\n  }\r\n\r\n  // Credit Personnel methods\r\n  createCreditPersonnel(credit: CreditPersonnel): Observable<CreditPersonnel> {\r\n    return this.http.post<CreditPersonnel>(`${this.baseUrl}/credits/personnel`, credit);\r\n  }\r\n\r\n  // Credit Professionnel methods\r\n  createCreditProfessionnel(credit: CreditProfessionnel): Observable<CreditProfessionnel> {\r\n    return this.http.post<CreditProfessionnel>(`${this.baseUrl}/credits/professionnel`, credit);\r\n  }\r\n\r\n  // Common methods for all credit types\r\n  updateCredit(id: number, credit: Credit): Observable<Credit> {\r\n    return this.http.put<Credit>(`${this.baseUrl}/credits/${id}`, credit);\r\n  }\r\n\r\n  deleteCredit(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/credits/${id}`);\r\n  }\r\n\r\n  simulateCredit(montant: number, duree: number, tauxInteret: number): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/credits/simulation`, {\r\n      params: { \r\n        montant: montant.toString(), \r\n        duree: duree.toString(), \r\n        tauxInteret: tauxInteret.toString() \r\n      }\r\n    });\r\n  }\r\n} "],"mappings":";;AAQA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,2BAA2B;EAEL;EAExC;EACAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,UAAU,CAAC;EAC3D;EAEAG,kBAAkBA,CAACC,QAAgB;IACjC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,YAAYI,QAAQ,UAAU,CAAC;EAC/E;EAEAC,SAASA,CAACC,EAAU;IAClB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,YAAYM,EAAE,EAAE,CAAC;EAC/D;EAEA;EACAC,sBAAsBA,CAACC,MAAwB;IAC7C,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAmB,GAAG,IAAI,CAACT,OAAO,qBAAqB,EAAEQ,MAAM,CAAC;EACvF;EAEA;EACAE,qBAAqBA,CAACF,MAAuB;IAC3C,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAkB,GAAG,IAAI,CAACT,OAAO,oBAAoB,EAAEQ,MAAM,CAAC;EACrF;EAEA;EACAG,yBAAyBA,CAACH,MAA2B;IACnD,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAsB,GAAG,IAAI,CAACT,OAAO,wBAAwB,EAAEQ,MAAM,CAAC;EAC7F;EAEA;EACAI,YAAYA,CAACN,EAAU,EAAEE,MAAc;IACrC,OAAO,IAAI,CAACT,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACb,OAAO,YAAYM,EAAE,EAAE,EAAEE,MAAM,CAAC;EACvE;EAEAM,YAAYA,CAACR,EAAU;IACrB,OAAO,IAAI,CAACP,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,OAAO,YAAYM,EAAE,EAAE,CAAC;EAChE;EAEAU,cAAcA,CAACC,OAAe,EAAEC,KAAa,EAAEC,WAAmB;IAChE,OAAO,IAAI,CAACpB,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,qBAAqB,EAAE;MACzDoB,MAAM,EAAE;QACNH,OAAO,EAAEA,OAAO,CAACI,QAAQ,EAAE;QAC3BH,KAAK,EAAEA,KAAK,CAACG,QAAQ,EAAE;QACvBF,WAAW,EAAEA,WAAW,CAACE,QAAQ;;KAEpC,CAAC;EACJ;;;uBAlDWxB,aAAa,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAb5B,aAAa;MAAA6B,OAAA,EAAb7B,aAAa,CAAA8B,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}